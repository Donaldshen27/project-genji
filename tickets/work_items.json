[
  {
    "ticket_id": "P3C4-001-009",
    "title": "Multi-Horizon Training Wrapper",
    "description": "Train all base models for both 21d and 63d horizons",
    "module": "src/model2/base_models.py",
    "dependencies": [
      "P3C4-001-006",
      "P3C4-001-007",
      "P3C4-001-008"
    ],
    "input": {
      "description": "Features, labels for both horizons, config",
      "schema": "features: DataFrame, labels: DataFrame with [label_21d, label_63d], config: dict"
    },
    "output": {
      "description": "Training results for all model-horizon pairs",
      "schema": "Dict[Tuple[str, str], {'oof': DataFrame, 'model': BaseModelTrainer, 'cv_scores': List[dict]}]"
    },
    "edge_cases": [
      "Label column missing: Raise KeyError with expected columns",
      "Feature-label index mismatch: Inner join, log dropped count",
      "Horizon fails mid-training: Log error, continue with other horizon",
      "All models fail: Raise RuntimeError with summary"
    ],
    "tests": [
      "test_multi_horizon_training_success: Verify all 4 model-horizon pairs train",
      "test_multi_horizon_feature_label_join: Verify inner join on indices",
      "test_multi_horizon_partial_failure: Verify continues on single model failure (if configured)",
      "test_multi_horizon_all_outputs: Verify all 4 OOF files and 4 model files exist"
    ],
    "acceptance": "All 4 model-horizon pairs train successfully, all outputs saved"
  },
  {
    "ticket_id": "P3C4-001-011",
    "title": "Determinism Validation Test",
    "description": "Test that training with seed=42 produces identical results on repeat",
    "module": "tests/unit/test_model2_base_models.py",
    "dependencies": [
      "P3C4-001-009"
    ],
    "input": {
      "description": "Fixed synthetic dataset and config",
      "schema": "X: DataFrame (100 samples, 10 features), y: Series (100 samples), config with random_state=42"
    },
    "output": {
      "description": "Assertion that two runs produce identical OOF predictions",
      "schema": "max_diff < 1e-9 for Ridge, max_diff < 1e-6 for XGBoost"
    },
    "edge_cases": [
      "XGBoost GPU vs CPU: Only test CPU (GPU may have minor diffs)",
      "Numerical precision: Allow 1e-6 tolerance for XGBoost due to floating point",
      "Order of predictions: Sort by index before comparison"
    ],
    "tests": [
      "test_ridge_determinism: Two runs produce identical Ridge OOF (max_diff < 1e-9)",
      "test_xgboost_determinism: Two runs produce identical XGBoost OOF (max_diff < 1e-6)",
      "test_cross_run_determinism: Full pipeline run twice produces identical all outputs"
    ],
    "acceptance": "Determinism test passes for both Ridge and XGBoost on synthetic data"
  },
  {
    "ticket_id": "P3C4-001-012",
    "title": "Integration with Existing Chunks (Labels, Features, CPCV)",
    "description": "Integrate base model training with Chunks 1-3",
    "module": "src/model2/train.py",
    "dependencies": [
      "P3C4-001-009"
    ],
    "input": {
      "description": "Config dict from YAML",
      "schema": "config: dict with keys [provider_uri, region, start_date, end_date, labels, features, cv_scheme, models]"
    },
    "output": {
      "description": "Trained models and OOF predictions",
      "schema": "All outputs from P3C4-001-009 saved to correct directories"
    },
    "edge_cases": [
      "Labels and features have different date ranges: Use inner join",
      "CPCV returns 0 splits: Raise ValueError with data range info",
      "Config missing required keys: Raise KeyError with expected keys",
      "Invalid model name in config: Raise ValueError from ModelRegistry"
    ],
    "tests": [
      "test_integration_labels_features: Verify labels and features loaded and joined",
      "test_integration_cpcv: Verify CPCV splitter created from config",
      "test_integration_end_to_end: Full pipeline with small Qlib dataset (smoke test)",
      "test_integration_config_validation: Verify required keys checked"
    ],
    "acceptance": "Integration test runs end-to-end with real Qlib data (small subset), all outputs saved"
  }
]
