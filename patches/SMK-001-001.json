{
  "ticket": "SMK-001-001",
  "file": "smoketest.md",
  "patch_unified": "--- a/smoketest.md\n+++ b/smoketest.md\n@@ -1 +1 @@\n-new workflow smoketest\n+new workflow smoketest\n",
  "description": "Validate smoketest.md file at repository root with workflow validation message. This is a P0 validation task to verify the patch-based workflow system. The file already exists with correct content ('new workflow smoketest' with POSIX-compliant newline). This patch provides integration tests to validate the file meets all contract requirements.",
  "context": "Ticket SMK-001-001 from work_items.json. This is a workflow smoketest with no external dependencies. Contract specifies UTF-8 encoding, exact content match with single trailing newline, and that no other files should be modified. The patch is a no-op on smoketest.md (file already correct) and adds comprehensive integration tests for future workflow validation runs.",
  "notes": "This patch validates an existing file and provides integration tests for the implementer-integrator workflow. The smoketest.md file already exists with correct content, so the main patch is a no-op. Edge cases covered in tests: (1) File existence verification; (2) Exact content match with single newline, no extra whitespace; (3) UTF-8 encoding; (4) Explicit trailing newline verification using byte-level check; (5) Git status isolation check using exact path matching to properly fail when unrelated files are modified, while allowing only the test script itself and the patch JSON file. The integration test script uses dynamic path resolution, process substitution to avoid subshell issues, and explicit newline validation to ensure portability across different environments.",
  "tests": [
    {
      "file": "tests/integration/test_smoketest_validation.sh",
      "patch_unified": "new file mode 100755\n--- /dev/null\n+++ b/tests/integration/test_smoketest_validation.sh\n@@ -0,0 +1,71 @@\n+#!/bin/bash\n+# Integration tests for SMK-001-001: smoketest.md validation\n+# These tests verify the file exists, has correct content, and does not affect other files.\n+\n+set -e\n+\n+# Compute project root dynamically from script location\n+SCRIPT_DIR=\"$(cd \"$(dirname \"$0\")\" && pwd)\"\n+PROJECT_ROOT=\"$(cd \"$SCRIPT_DIR/../..\" && pwd)\"\n+TARGET_FILE=\"$PROJECT_ROOT/smoketest.md\"\n+\n+echo Test 1: Verify file exists\n+if [ ! -f \"$TARGET_FILE\" ]; then\n+    echo FAIL: smoketest.md does not exist\n+    exit 1\n+fi\n+echo PASS: File exists\n+\n+echo Test 2: Verify exact content match\n+EXPECTED='new workflow smoketest'\n+ACTUAL=$(cat \"$TARGET_FILE\")\n+if [ \"$ACTUAL\" != \"$EXPECTED\" ]; then\n+    echo FAIL: Content mismatch\n+    exit 1\n+fi\n+echo PASS: Content matches exactly\n+\n+echo Test 3: Verify file ends with exactly one newline\n+# Use hexdump to check last byte is newline and second-to-last is not\n+LAST_BYTE=$(tail -c 1 \"$TARGET_FILE\" | od -An -tx1 | tr -d ' ')\n+if [ \"$LAST_BYTE\" != \"0a\" ]; then\n+    echo FAIL: File does not end with newline\n+    exit 1\n+fi\n+LAST_TWO=$(tail -c 2 \"$TARGET_FILE\" | od -An -tx1 | tr -d ' ')\n+if [ \"$LAST_TWO\" = \"0a0a\" ]; then\n+    echo FAIL: File has multiple trailing newlines\n+    exit 1\n+fi\n+echo PASS: File ends with exactly one newline\n+\n+echo Test 4: Verify only expected files in git status\n+cd \"$PROJECT_ROOT\"\n+GIT_STATUS=$(git status --porcelain)\n+if [ -z \"$GIT_STATUS\" ]; then\n+    echo PASS: Git status clean\n+else\n+    # Check each line for exact path match and exit immediately on mismatch\n+    ALLOWED_FILES=\"smoketest.md tests/integration/test_smoketest_validation.sh patches/SMK-001-001.json\"\n+    while IFS= read -r line; do\n+        # Extract filename from porcelain format (skip first 3 chars)\n+        filepath=$(echo \"$line\" | cut -c4-)\n+        # Check if this file is in allowed list\n+        FOUND=0\n+        for allowed in $ALLOWED_FILES; do\n+            if [ \"$filepath\" = \"$allowed\" ]; then\n+                FOUND=1\n+                break\n+            fi\n+        done\n+        if [ \"$FOUND\" -eq 0 ]; then\n+            echo FAIL: Unexpected file modified: $filepath\n+            echo Full git status:\n+            echo \"$GIT_STATUS\"\n+            exit 1\n+        fi\n+    done < <(echo \"$GIT_STATUS\")\n+    echo PASS: Only expected files in git status\n+fi\n+\n+echo All integration tests passed for SMK-001-001\n"
    }
  ]
}
